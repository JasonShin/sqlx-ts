on:
  release:
    types: [created]

name: release

jobs:
  update-package-version:
    name: update version number in Cargo.toml
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@master
        with:
          ref: main

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Get tag version
        shell: bash
        run: |
          tag="$github.event.release.tag_name"
          version=$(echo $TAG | cut -d 'v' -f2)
          echo "PKG_VERSION=$version" >> $GITHUB_ENV
          echo "Tag detected $tag - $version"

      - name: Edit Cargo.toml
        uses: ciiiii/toml-editor@1.0.0
        with:
          file: "Cargo.toml"
          key: "package.version"
          value: "${{ env.PKG_VERSION }}"
      
      - name: Git Push
        shell: bash
        run: |
          echo "Updated to ${{ env.PKG_VERSION }}"
          git config --global user.email "visualbbasic@gmail.com"
          git config --global user.name "Jason Shin"
          cat Cargo.toml
          git add .
          git commit -m "release: Updating Cargo.toml package version"
          git push
      
  build-release:
    name: release ${{ matrix.target }}
    needs: update-package-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-20.04
            rust: stable
            target: x86_64-unknown-linux-musl
          - build: macos
            os: macos-12
            rust: stable
            target: x86_64-apple-darwin
          - build: windows
            os: windows-2022
            rust: stable
            target: x86_64-pc-windows-gnu

    steps:
      - name: Checkout repository
        uses: actions/checkout@master

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Install packages (Ubuntu)
        if: matrix.os == 'ubuntu-20.04'
        run: |
          ci/ubuntu-install-packages

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - name: Build release binary
        run: cargo build --verbose --release

      - name: Build archive
        shell: bash
        run: |
          ls target/release
          file_name="sqlx_ts_${{ github.event.release.tag_name }}_${{ matrix.target }}"

          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            cp target/release/sqlx-ts.exe sqlx-ts.exe
            7z a "$file_name.zip" sqlx-ts.exe
            echo "ASSET=$file_name.zip" >> $GITHUB_ENV
          else
            cp target/release/sqlx-ts sqlx-ts
            tar -czf "$file_name.tar.gz" sqlx-ts
            ls
            echo "ASSET=$file_name.tar.gz" >> $GITHUB_ENV
          fi
          
      - name: Upload release archive
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET }}

      # - name: Upload release archive
      #   uses: actions/upload-release-asset@v1.0.1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.get_release.outputs.upload_url }}
      #     asset_path: ${{ env.ASSET }}
      #     asset_name: ${{ env.ASSET }}
      #     asset_content_type: application/octet-stream

  build-cargo-release:
    name: cargo release
    needs: update-package-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@master
        with:
          ref: main

      - name: Check git status
        run: git status

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Install packages (Ubuntu)
        run: |
          ci/ubuntu-install-packages

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install cargo-release
        run: cargo install cargo-release

      - name: Git Config
        shell: bash
        run: |
          git config --global user.email "visualbbasic@gmail.com"
          git config --global user.name "Jason Shin"

      - name: Release to crates.io
        shell: bash
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          tag="$github.event.release.tag_name"

          cargo release \
            --tag-name="$tag" \
            --no-tag \
            --execute \
            --no-confirm
         
