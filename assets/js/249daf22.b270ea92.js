"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[787],{4680:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"type-generation/README","title":"TypeScript Types Generation","description":"SQLX-TS provides powerful TypeScript type generation based on the raw SQL queries in your code. This feature significantly enhances type","source":"@site/docs/type-generation/README.mdx","sourceDirName":"type-generation","slug":"/type-generation/","permalink":"/sqlx-ts/type-generation/","draft":false,"unlisted":false,"editUrl":"https://github.com/jasonshin/sqlx-ts/edit/main/book/docs/type-generation/README.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Command Line Interface","permalink":"/sqlx-ts/cli/"},"next":{"title":"SELECT statements","permalink":"/sqlx-ts/type-generation/select"}}');var s=n(4848),i=n(8453);const a={},o="TypeScript Types Generation",l={},d=[{value:"Getting started",id:"getting-started",level:2},{value:"Capabilities",id:"capabilities",level:2},{value:"DELETE statements",id:"delete-statements",level:3},{value:"Annotations for overrides",id:"annotations-for-overrides",level:3},{value:"Q &amp; A",id:"q--a",level:2},{value:"Why doesn&#39;t SQLx support named parameterised queries? <code>e.g. SELECT * FROM items WHERE point = :point</code>",id:"why-doesnt-sqlx-support-named-parameterised-queries-eg-select--from-items-where-point--point",level:5}];function p(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"typescript-types-generation",children:"TypeScript Types Generation"})}),"\n",(0,s.jsx)(t.p,{children:"SQLX-TS provides powerful TypeScript type generation based on the raw SQL queries in your code. This feature significantly enhances type\nsafety, eliminating the need for traditional ORMs."}),"\n",(0,s.jsx)(t.p,{children:"Without automatic type generation, developers must manually maintain type definitions for each raw SQL query\u2014a fragile and error-prone\nprocess that adds unnecessary overhead, especially in large projects. SQLX-TS streamlines this by ensuring type correctness directly from\nyour queries, reducing maintenance and improving reliability."}),"\n",(0,s.jsx)(t.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,s.jsxs)(t.p,{children:["The easiest way to enable type generation in SQLX-TS is by using the ",(0,s.jsx)(t.code,{children:"-g"})," or ",(0,s.jsx)(t.code,{children:"--generate-types"})," flag when running the SQLX-TS CLI.\nIt can be configured through configuration file as well, ",(0,s.jsx)(t.a,{href:"/connect/config-file",children:"click here to learn more"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"$ cargo run --generate-types --config=.sqlxrc.json ./src/app\n"})}),"\n",(0,s.jsx)(t.h2,{id:"capabilities",children:"Capabilities"}),"\n",(0,s.jsx)(t.p,{children:"SQLX-TS supports following type generations and other SQL syntax will be ignored from type generation"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/type-generation/select",children:"SELECT statements"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/type-generation/insert",children:"INSERT statements"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/type-generation/update",children:"UPDATE statements"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/type-generation/delete",children:"DELETE statements"})}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Also type generation supports parameterised query as per the requirements of PREPARE statements of the databases\nthat SQLX-TS currently supports."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://dev.mysql.com/doc/refman/8.0/en/prepare.html",children:"MySQL PREPARE"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.postgresql.org/docs/current/sql-prepare.html",children:"Postgres PREPARE"})}),"\n"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Database"}),(0,s.jsx)(t.th,{children:"Parameterised Query"}),(0,s.jsx)(t.th,{children:"Example"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"MySQL"}),(0,s.jsx)(t.td,{children:"?"}),(0,s.jsx)(t.td,{children:"SELECT * FROM items WHERE points > ? AND points < ?"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Postgres"}),(0,s.jsx)(t.td,{children:"$1 $2 $3"}),(0,s.jsx)(t.td,{children:"SELECT * FROM items WHERE points > $1 AND points < $2"})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"in your codebase, if you have the following SQL query"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"const simpleQuery = sql`\nSELECT *\nFROM items\nWHERE points > ?\nAND points < ?\n`\n"})}),"\n",(0,s.jsx)(t.p,{children:"by running sqlx-ts type generation against the query, it would generate"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"export type ISimpleQueryParams = [number, number]\n\nexport interface ISimpleQueryResult {\n    id: string\n    points: number\n}\n\nexport interface ISimpleQueryQuery{\n    params: ISimpleQueryParams;\n    result: ISimpleQueryResult;\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["SQLX-TS will pick up name of the variable and use it when generating the type definitions. You can override\nthe type name by setting the ",(0,s.jsx)(t.code,{children:"@name"})," annotation, you can read more in the section ",(0,s.jsx)(t.a,{href:"#annotations",children:"below"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"delete-statements",children:"DELETE statements"}),"\n",(0,s.jsx)(t.h3,{id:"annotations-for-overrides",children:"Annotations for overrides"}),"\n",(0,s.jsx)(t.h2,{id:"q--a",children:"Q & A"}),"\n",(0,s.jsxs)(t.h5,{id:"why-doesnt-sqlx-support-named-parameterised-queries-eg-select--from-items-where-point--point",children:["Why doesn't SQLx support named parameterised queries? ",(0,s.jsx)(t.code,{children:"e.g. SELECT * FROM items WHERE point = :point"})]}),"\n",(0,s.jsx)(t.p,{children:"We believe that there is no official way in Typescript to ensure the value level type-safety yet and providing named parameter does not guarantee\nthe true type safetiness that we are trying to achieve. Furthermore, name parameter is not the syntax supported by native database drivers, but\nthey are an additional syntax supported by popular ORM libraries such as Sequelize."}),"\n",(0,s.jsxs)(t.p,{children:["The closest type safety that exists in TypeScript world is by emulating Opaque type e.g. ",(0,s.jsx)(t.a,{href:"https://github.com/sindresorhus/type-fest/blob/main/source/opaque.d.ts",children:"https://github.com/sindresorhus/type-fest/blob/main/source/opaque.d.ts"}),".\nIn the future, SQLX-TS will support Opaque type overrides natively to solve this matter."]})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(6540);const s={},i=r.createContext(s);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);