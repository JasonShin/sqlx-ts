"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[448],{4646:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"connect/config-file","title":"Configuration file","description":"If you have a project that you need requires connections to multiple databases, you can support","source":"@site/docs/connect/config-file.md","sourceDirName":"connect","slug":"/connect/config-file","permalink":"/sqlx-ts/connect/config-file","draft":false,"unlisted":false,"editUrl":"https://github.com/jasonshin/sqlx-ts/edit/main/book/docs/connect/config-file.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Connecting to databases","permalink":"/sqlx-ts/connect/"},"next":{"title":"Environment variables","permalink":"/sqlx-ts/connect/environment-variables"}}');var o=s(4848),i=s(8453);const c={},r="Configuration file",a={},l=[{value:"Configuration options",id:"configuration-options",level:2},{value:"connections (required)",id:"connections-required",level:3},{value:"generate_types",id:"generate_types",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"configuration-file",children:"Configuration file"})}),"\n",(0,o.jsx)(n.p,{children:"If you have a project that you need requires connections to multiple databases, you can support\nthat by using file based configuration."}),"\n",(0,o.jsxs)(n.p,{children:["By default, configuration file is named ",(0,o.jsx)(n.code,{children:".sqlxrc.json"})," and SQLX-TS will try to find a file with\nthis name, unless you give it a custom path to override it using ",(0,o.jsx)(n.code,{children:"--config"})," CLI option."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"$ sqlx-ts --config <path to a custom .sqlxrc.json>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Example ",(0,o.jsx)(n.code,{children:".sqlxrc.json"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "generate_types": {\n    "enabled": true,\n    "convertToCamelCaseColumnName": true\n  },\n  "connections": {\n    "default": {\n      "DB_TYPE": "mysql",\n      "DB_USER": "root",\n      "DB_HOST": "127.0.0.1",\n      "DB_PORT": 3306\n    },\n    "postgres": {\n      "DB_TYPE": "postgres",\n      "DB_USER": "postgres",\n      "DB_PASS": "postgres",\n      "DB_HOST": "127.0.0.1",\n      "DB_PORT": 4321,\n      "PG_SEARCH_PATH": "public,myschema"\n    },\n    "some_other_db": {\n      "DB_TYPE": "mysql",\n      "DB_USER": "app_user",\n      "DB_PASS": "password",\n      "DB_HOST": "127.0.0.1",\n      "DB_PORT": 3307,\n      "POOL_SIZE": 20,\n      "CONNECTION_TIMEOUT": 10\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"configuration-options",children:"Configuration options"}),"\n",(0,o.jsx)(n.h3,{id:"connections-required",children:"connections (required)"}),"\n",(0,o.jsxs)(n.p,{children:["For default database, you must call it ",(0,o.jsx)(n.code,{children:"default"})," like example above. Any extra DB connections\nshould have its own unique name such as ",(0,o.jsx)(n.code,{children:"postgres"})," or ",(0,o.jsx)(n.code,{children:"some_other_db"})]}),"\n",(0,o.jsx)(n.p,{children:"Along with the configuration above, when writing SQLs in your codebase, you need to provide\nsupportive comment in your raw SQL, indicate which database the query should point."}),"\n",(0,o.jsx)(n.p,{children:"For example,"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { sql } from 'sqlx-ts'\n\n// targets the default DB\nconst defaultDbSQL = sql`SELECT * FROM test;`\n// targets the config with the name `postgres`\nconst postgresSQL = sql`\n -- @db: postgres\n SELECT * FROM other_table;\n`\n"})}),"\n",(0,o.jsx)(n.p,{children:"Supported fields of each connection include"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"DB_TYPE"}),": type of database connection (mysql | postgres)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"DB_USER"}),": database user name"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"DB_PASS"}),": database password"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"DB_HOST"}),": database host (e.g. 127.0.0.1)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"DB_PORT"}),": database port (e.g. 4321)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"PG_SEARCH_PATH"}),': PostgreSQL schema search path (default is "$user,public") ',(0,o.jsx)(n.a,{href:"https://www.postgresql.org/docs/current/ddl-schemas.html#DDL-SCHEMAS-PATH",children:"https://www.postgresql.org/docs/current/ddl-schemas.html#DDL-SCHEMAS-PATH"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"POOL_SIZE"}),": Size of the connection pool to establish per connection type"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"CONNECTION_TIMEOUT"}),": Timeout in second of Database connection attempt"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"generate_types",children:"generate_types"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "generateTypes: {\n    enabled: true|false,\n    columnNamingConvention: "upper | lower | title | camel | pascal | snake | kebab"\n  },\n  "connections": {\n    ...\n  }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Support for configuration of generate types operations."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"enabled"})," (default: false): enables type generation via config"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"columnNamingConvention"})," (optional): When generating field name based on table's column name, you can pass in a type of naming convention to be used","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"oneOf: upper | lower | title | camel | pascal | snake | kebab"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>r});var t=s(6540);const o={},i=t.createContext(o);function c(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);