import { sql } from 'sqlx-ts'

const allNumbers = sql`
SELECT
    ABS(1) AS abs1,
    ACOS(1) AS acos1,
    ASIN(1) AS asin1,
    ATAN(1) AS atan1,
    AVG(1) AS avg1,
    CEIL(1) AS ceil1,
    CEILING(1) AS ceiling1,
    COS(1) AS cos1,
    COT(1) AS cot1,
    COUNT(1) AS count1,
    DEGREES(1) AS degrees1,
    EXP(1) AS exp1,
    FLOOR(1) AS floor1,
    GREATEST(1) AS greatest1,
    LEAST(1) AS least1,
    LN(1) AS ln1,
    LOG(1) AS log1,
    LOG10(1) AS log101,
    MAX(1) AS max1,
    MIN(1) AS min1,
    POW(1, 1) AS pow1,
    MOD(1, 1) AS mod1,
    PI() AS pi1,
    POWER(1, 1) AS pow2,
    RADIANS(1) AS radians1,
    ROUND(1, 0) AS round0, -- Changed to 0 for no decimal places
    SIGN(1) AS sign1,
    SIN(1) AS sin1,
    SQRT(1) AS sqrt1,
    SUM(1) AS sum1,
    TAN(1) AS tan1,
    TRUNC(51.11, 0) AS trunc0 -- Changed to truncate to 0 decimal places
`

const allStrings = sql`
SELECT
    substring('test', 1, 2) AS substring1,
    CONCAT('test', 'ing') AS concat1,
    LENGTH('test') AS length1,
    LOWER('TEST') AS lower1,
    UPPER('test') AS upper1,
    REPLACE('test', 'e', 'a') AS replace1,
    TRIM('  test  ') AS trim1,
    LTRIM('  test  ') AS ltrim1,
    RTRIM('  test  ') AS rtrim1,
    POSITION('e' IN 'test') AS position1,
    CHAR_LENGTH('test') AS char_length1,
    LEFT('test', 2) AS left1,
    RIGHT('test', 2) AS right1,
    REPEAT('test', 2) AS repeat1,
    REVERSE('test') AS reverse1,
    ASCII('A') AS ascii1,
    LENGTH('test') * 8 AS bit_length1,
    LENGTH('test'::bytea) AS octet_length1,
    encode(digest('test', 'sha1'), 'hex') AS sha1_1,
    encode(digest('test', 'sha256'), 'hex') AS sha256_1,
    encode(digest('test', 'sha512'), 'hex') AS sha512_1,
    TO_CHAR(12345.6789, 'FM99999.00') AS to_char1,
    TO_DATE('2023-10-01', 'YYYY-MM-DD') AS to_date1,
    TO_TIMESTAMP('2023-10-01 12:00:00', 'YYYY-MM-DD HH24:MI:SS') AS to_timestamp1,
    EXTRACT(YEAR FROM CURRENT_DATE) AS extract_year1,
    EXTRACT(MONTH FROM CURRENT_DATE) AS extract_month1,
    EXTRACT(DAY FROM CURRENT_DATE) AS extract_day1,
    EXTRACT(HOUR FROM CURRENT_TIME) AS extract_hour1,
    EXTRACT(MINUTE FROM CURRENT_TIME) AS extract_minute1,
    EXTRACT(SECOND FROM CURRENT_TIME) AS extract_second1,
    DATE_PART('year', CURRENT_DATE) AS date_part_year1,
    DATE_PART('month', CURRENT_DATE) AS date_part_month1,
    DATE_PART('day', CURRENT_DATE) AS date_part_day1,
    DATE_PART('hour', CURRENT_TIME) AS date_part_hour1,
    DATE_PART('minute', CURRENT_TIME) AS date_part_minute1,
    DATE_PART('second', CURRENT_TIME) AS date_part_second1,
    CURRENT_DATE AS current_date1,
    CURRENT_TIME AS current_time1,
    CURRENT_TIMESTAMP AS current_timestamp1,
    NOW() AS now1,
    LOCALTIME AS localtime1,
    LOCALTIMESTAMP AS localtimestamp1,
    AGE(TIMESTAMP '2023-10-01 12:00:00', TIMESTAMP '2023-09-01 12:00:00') AS age1,
    DATE_TRUNC('day', CURRENT_TIMESTAMP) AS date_trunc_day1,
    DATE_TRUNC('month', CURRENT_TIMESTAMP) AS date_trunc_month1,
    DATE_TRUNC('year', CURRENT_TIMESTAMP) AS date_trunc_year1,
    DATE_TRUNC('hour', CURRENT_TIMESTAMP) AS date_trunc_hour1,
    DATE_TRUNC('minute', CURRENT_TIMESTAMP) AS date_trunc_minute1,
    DATE_TRUNC('second', CURRENT_TIMESTAMP) AS date_trunc_second1,
    TO_JSON('test'::text) AS to_json1,
    TO_JSONB('test'::text) AS to_jsonb1,
    JSON_BUILD_OBJECT('key', 'value') AS json_build_object1,
    JSONB_BUILD_OBJECT('key', 'value') AS jsonb_build_object1,
    JSON_BUILD_ARRAY('value1', 'value2') AS json_array1,
    JSONB_BUILD_ARRAY('value1', 'value2') AS jsonb_array1,
    '{"key": "value"}'::json->>'key' AS json_extract_path_text1,
    '{"key": "value"}'::jsonb->>'key' AS jsonb_extract_path_text1,
    RANDOM() AS random1;
`